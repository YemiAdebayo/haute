"""
Django settings for haute project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from decouple import config, Csv
from django.conf import settings
# from accounts.forms import RegistrationForm

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # third party apps
    'crispy_forms',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.twitter',

    # project created apps
    'accounts',
    'profiles',
    'home',
    'products',
    'search',
    'tags',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

# This changes the django default user to the one created in the acoounts app
AUTH_USER_MODEL = 'accounts.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'haute.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,  'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'haute.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    # '/var/www/static/',
]

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static")

MEDIA_URL = '/media/'


LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'home'
LOGOUT_URL = 'sign-out'
LOGOUT_REDIRECT_URL = 'home'

# TEMPLATED_EMAIL_BACKEND = 'templated_email.backends.vanilla_django.TemplateBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = 'Adeyemi Adebayo <bayoade1007@gmail.com>'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_USE_SSL = True
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    # Django-allauth backend configuration
    "allauth.account.auth_backends.AuthenticationBackend",
)

# ------ Django-allauth specific configurations start here

SOCIALACCOUNT_PROVIDERS = {'google':
                           {'SCOPE': ['profile', 'email', ],
                            'AUTH_PARAMS': {'access_type': 'online'},
                               #    'FIELDS': [
                               #        'email',
                               #        'name',
                               #        'first_name',
                               #        'last_name',
                               #    ]
                            },
                           'facebook': {
                               'METHOD': 'oauth2',
                               'SDK_URL': '//connect.facebook.net/{locale}/sdk.js',
                               'SCOPE': ['email', 'public_profile'],
                               'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
                               'INIT_PARAMS': {'cookie': True},
                               'FIELDS': [
                                   'id',
                                   'first_name',
                                   'last_name',
                                   'middle_name',
                                   'name',
                                   'name_format',
                                   'picture',
                                   'short_name'
                               ],
                               'EXCHANGE_TOKEN': True,
                               'LOCALE_FUNC': lambda request: 'en_US',
                               'VERIFIED_EMAIL': False,
                               'VERSION': 'v8.0',
                           }
                           }

SITE_ID = config('SITE_ID', cast=int)

ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
# SOCIALACCOUNT_AUTO_SIGNUP = True

ACCOUNT_FORMS = {
    'signup': 'accounts.forms.RegistrationForm',
}

SOCIALACCOUNT_FORMS = {
    'signup': 'accounts.forms.CustomAllauthSignUpForm',
}

# ------ Django-allauth specific configurations end here


# -----Set Celery IP and port here------
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# ------ All conditional statements start here ------

if DEBUG:
    import mimetypes
    mimetypes.add_type("application/javascript", ".js", True)
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
else:
    MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), "media")

# ----- All conditional statements end here ---
